from msilib.schema import Error
import mysql.connector
import names
import maskpass
import random
from faker import Faker
from datetime import datetime

passwd1 = maskpass.askpass(prompt="What is your MySQL password: ", mask="*")

db= mysql.connector.connect(user= "root", host= "localhost", port= 3306, passwd= passwd1, database= "Training")

cursorObject = db.cursor()
# cursorObject.execute("CREATE TABLE if not exists Clients (Account_Number  int AUTO_INCREMENT, Primary Key(Account_Number), Name VARCHAR(100) NOT NULL, Age smallint UNSIGNED NOT NULL, Gender ENUM('Male', 'Female', 'Other') NOT NULL)")
# cursorObject.execute("CREATE TABLE if not exists Doctors (Doctor_Name Varchar(100), Primary Key(Doctor_Name), Client_Account int, Foreign Key(Client_Account) References Clients(Account_Number), Type varchar(15) Not Null, Office_Address varchar(10000) Not Null)")   
# cursorObject.execute("Create Table if not exists Cost_of_Coverage (Account_Num int, Foreign Key(Account_Num) References Clients(Account_Number), Doc_Name varchar(100), Foreign Key(Doc_Name) References Doctors(Doctor_Name), Deductable int Default 200, Monthly_Charge int Default 100)")
# db.commit()

# doclist=["Physician", "Specialist"]
# fake=Faker()
# mylist = ["Male", "Female", "Other"]
# i=1
# while i<51:
    # cursorObject.execute("INSERT INTO Clients (Name, Age, Gender) VALUES(%s,%s,%s) ",(names.get_full_name(), random.randrange(82)+18, mylist[random.randrange(3)]))
    # cursorObject.execute("INSERT INTO Doctors (Doctor_Name, Client_Account, Type, Office_Address) VALUES(%s,%s,%s,%s) ", (names.get_full_name(),random.randrange(50)+1, doclist[random.randrange(2)], fake.address()))    
#     cursorObject.execute("Update Column(Deductable)", (random.randrange(100,500)))
#     i+=1
# db.commit()
# cursorObject.execute("Insert Into Doctors(Doctor_Name, Client_Account, Type, Office_Address) Values(%s,%s,%s,%s)", ("Thomas", 2, "Physician", "Place"))
# db.commit()
# cursorObject.execute("Select * From Client and Doctors")
# for x in cursorObject:
#     print(x)
# cursorObject.execute("Show Tables")
# for x in cursorObject:
#     print(x)
# X1 = "Insert Into Clients(Name,Age,Gender) Values(%s,%s,%s)" 

# X2= "Insert Into Doctors(Doctor_Name, Client_Account, Type, Office_Address) Values(%s,%s,%s,%s)"
# Sp2= [("Alfred Perry", 11, "Male", fake.address())]

# X3= "Insert Into Cost_of_Coverage(Account_Num, Doc_Name, Deductable, Monthly_Charge) Values(%s,%s,%s,%s)"
# Sp3=[( 'Monica', 1, 500, 150)]


# cursorObject.execute("Insert Into Doctors(Doctor_Name, Client_Account, Type, Office_Address) Values(%s,%s,%s,%s)",("Alfred Knox", 11, "Male", fake.address()))
# db.commit()
# cursorObject.execute("Insert into Cost_of_Coverage(Account_Num, Doc_Name, Deductable, Monthly_Charge) Values(")
# cursorObject.execute("Insert into Cost_of_Coverage((Account_Num) Select(Account_Number) from Clients)") 
# Insert into cost_of_coverage(Doc_Name) Select(Doctor_Name) from Doctors)") 
# ("",random.randrange(100,500), random.randrange(50,200)))
# db.commit()
def insert_creation():
    while True:
        print("Are you creating a client entry, a doctor entry, or a cost of coverage entry?")
        print("\t1. Client.")
        print("\t2. Doctor.")
        print("\t3. Cost of coverage.")
        print("\t4. Return back to the main directory.")
        try:
            cel=int(input("\nSelection: "))
        except ValueError:
                print(ValueError)
                print("Please enter an integer that is between 1 and 4.")
        if cel == 1:
            while True:
                print("First we need to create the table Clients, then we'll fill the table.")
                print("\t1. Create Clients.")
                print("\t2. Fill table.")
                print("\t3. Single Entry.")
                print("\t4. Return to previous directory.")
                try:
                    cl1=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please enter the correct number.")
                if cl1==1:
                    cursorObject.execute("CREATE TABLE if not exists Clients (Account_Number  int AUTO_INCREMENT, Primary Key(Account_Number), Name VARCHAR(100) NOT NULL, Age smallint UNSIGNED NOT NULL, Gender ENUM('Male', 'Female', 'Other') NOT NULL)")
                    db.commit()
                elif cl1==2:
                    mylist = ["Male", "Female", "Other"]
                    i=1
                    while i<51:
                        cursorObject.execute("INSERT INTO Clients (Name, Age, Gender) VALUES(%s,%s,%s) ",(names.get_full_name(), random.randrange(82)+18, mylist[random.randrange(3)]))
                        i+=1
                    db.commit()
                elif cl1==3:    
                    mylist = ["Male", "Female", "Other"]
                    cursorObject.execute("INSERT INTO Clients (Name, Age, Gender) VALUES(%s,%s,%s) ",(names.get_full_name(), random.randrange(82)+18, mylist[random.randrange(3)]))
                    db.commit()
                elif cl1==4:
                    break
        elif cel==2:
            while True:
                print("Secondly we need to create the table Doctors, and then we'll fill the table.")
                print("\t1. Create Doctors.")
                print("\t2. Fill table.")
                print("\t3. Single Entry.")
                print("\t4. Return to previous directory.")
                try:
                    cl2=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please enter the correct number.")
                if cl2==1:
                    cursorObject.execute("CREATE TABLE if not exists Doctors (Doctor_Name Varchar(100), Client_Account int, Foreign Key(Client_Account) References Clients(Account_Number), Type varchar(15) Not Null, Office_Address varchar(10000) Not Null)")
                    db.commit()
                elif cl2==2:
                    pass
                    # doclist=["Physician", "Specialist"]
                    # fake=Faker()
                    # i=1
                    # while i<51:
                    #     cursorObject.execute("INSERT INTO Doctors (Doctor_Name, Client_Account, Type, Office_Address) VALUES(%s,%s,%s,%s) ", (names.get_full_name(),random.randrange(50)+1, doclist[random.randrange(2)], fake.address()))      
                    # i+=1
                    # db.commit()
                elif cl2==3:                                
                    fake=Faker()
                    doclist=["Physician", "Specialist"]
                    cursorObject.execute("INSERT INTO Doctors (Doctor_Name, Client_Account, Type, Office_Address) VALUES(%s,%s,%s,%s) ", (names.get_full_name(),random.randrange(50)+1, doclist[random.randrange(2)], fake.address()))
                    db.commit()
                elif cl2==4:
                    break
        elif cel==3:
            while True:
                print("Finally we need to create the table Cost of Coverage, and then we'll fill the table.")
                print("\t1. Create Cost of Coverage.")
                print("\t2. Fill table.")
                print("\t3. Single Entry.")
                print("\t4. Finally Adjustment.")
                print("\t5. Return to previous directory.")
                try:
                    cl3=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please enter the correct number.")
                if cl3==1:
                    cursorObject.execute("create table cost_of_coverage as(Select Account_Number, Doctor_Name from Clients join Doctors on Clients.Account_Number=Doctors.Client_Account)")
                    db.commit()
                elif cl3==2:
                    cursorObject.execute("alter table cost_of_coverage add column Deductible int not null Default 500")
                    cursorObject.execute("alter table cost_of_coverage add column Monthly_Charge int not null default 300") 
                    db.commit()
                elif cl3==3:                  
                    account= input("Give me number between 1 and 50: ")
                    name= input("Give me a first and last name: ")
                    deductable= input("Choose a number between 100 and 1000: ")
                    charge= input("Give me a number between 100 and 400: ")
                    cursorObject.execute("Insert Into Cost_of_Coverage (Account_Number, Doctor_Name, Deductible, Monthly_Charge) Values(%s,%s,%s,%s)",(account,name,deductable,charge))
                    db.commit()
                elif cl3==4:
                    cursorObject.execute("alter table cost_of_coverage add foreign key(Account_Number) references Clients(Account_Number)")
                    db.commit()
                elif cl3==5:
                    break
        elif cel==4:
            break

def insert_reading():
    while True:
        print("Welcome to the reading portion. Make a selection.")
        print("\t1. To view the tables.")
        print("\t2. To view the tables' columns.")
        print("\t3. To return to the main directory.")
        try:
            rel=int(input("\nSelection: "))
        except ValueError:
            print(ValueError)
            print("Please make a valid input.")
        if rel==1:
            while True:
                print("Here you can choose which table to view.")
                print("\t1. To view what tables present.")
                print("\t2. To view Clients.")
                print("\t3. To view Doctors.")
                print("\t4. To view the Cost of Coverage.")
                print("\t5. To return to the previous directory.")
                try:
                    tel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please make a valid selection.")
                if tel==1:
                    cursorObject.execute("Show Tables")
                    for x in cursorObject:
                        print(x)
                elif tel==2:
                    cursorObject.execute("Select * From Clients")
                    for x in cursorObject:
                        print(x)
                elif tel==3:
                    cursorObject.execute("Select * From Doctors")
                    for x in cursorObject:
                        print(x)
                elif tel==4:
                    cursorObject.execute("Select * From Cost_of_Coverage")
                    for x in cursorObject:
                        print(x)
                elif tel==5:
                    break
        elif rel==2:
            while True:
                print("Here is a list of all available columns.")
                print("Enter your selection of the column you want to view.")
                print("Clients: \t1.Account_Number, \t2.Name, \t3.Age, \t4.Gender")
                print("Doctors: \t5.Doctor_Name, \t6.Client_Account, \t7.Type, \t8.Office_Address")
                print("Cost_of_Coverage: \t9.Account_Number, \t10.Doctor_Name, \t11.Deductible, \t12.Monthly_Charge")
                print("\t13 When done viewing.")
                try:
                    mel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please try again.")
                if mel==1:
                    cursorObject.execute("Select Account_Number from Clients")
                    for x in cursorObject:
                        print(x)
                elif mel==2:
                    cursorObject.execute("Select Name from Clients")
                    for x in cursorObject:
                        print(x)
                elif mel==3:
                    cursorObject.execute("Select Age from Clients")
                    for x in cursorObject:
                        print(x)
                elif mel==4:
                    cursorObject.execute("Select Gender from Clients")
                    for x in cursorObject:
                        print(x)
                elif mel==5:
                    cursorObject.execute("Select Doctor_Name from Doctors")
                    for x in cursorObject:
                        print(x)
                elif mel==6:
                    cursorObject.execute("Select Client_Account from Doctors")
                    for x in cursorObject:
                        print(x)
                elif mel==7:
                    cursorObject.execute("Select Type from Doctors")
                    for x in cursorObject:
                        print(x)
                elif mel==8:
                    cursorObject.execute("Select Office_Address from Doctors")
                    for x in cursorObject:
                        print(x)
                elif mel==9:
                    cursorObject.execute("Select Account_Number from Cost_of_Coverage")
                    for x in cursorObject:
                        print(x)
                elif mel==10:
                    cursorObject.execute("Select Doctor_Name from Cost_of_Coverage")
                    for x in cursorObject:
                        print(x)
                elif mel==11:
                    cursorObject.execute("Select Deductible from Cost_of_Coverage")
                    for x in cursorObject:
                        print(x)
                elif mel==12:
                    cursorObject.execute("Select Monthly_Charge from Cost_of_Coverage")
                    for x in cursorObject:
                        print(x)
                elif mel==13:
                    break
        elif rel==3:
            break

def insert_updating():
    while True:
        print("Welcome to the updating portion of the tutorial. In this directory we can update tables, columns and rows.")
        print("\t1. To update a table.")
        print("\t2. To update a column.")
        print("\t3. To update a row.")
        print("\t4. To return to the main directory.")
        try:
            uel=int(input("\nSelection: "))
        except ValueError:
            print(ValueError)
            print("Please make a valid selection.")
        if uel==1:
            while True:
                print("Here in this section we can update the tables by adding columns.")
                print("\t1. To add a column to Clients.")
                print("\t2. To add a column to Doctors.")
                print("\t3. To add a column to Cost of Coverage.")
                print("\t4. To return to the previous directory.")
                try:
                    zel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please enter the correct integer.")
                if zel==1:
                    cursorObject.execute("Alter Table Clients add Column(Risk_Percentage int Default 0)")
                    db.commit()
                elif zel==2:
                    cursorObject.execute("Alter Table Doctors add column(Rating small int default 1)")
                    db.commit()
                elif zel==3:
                    cursorObject.execute("Alter Table Cost_of_Coverage add column(Duration_of_Coverage small int default 12)")
                    db.commit()
                elif zel==4:
                    break
        elif uel==2:
            while True:
                print("Welcome to the Column updating section.")
                print("\t1. Update Risk Percentage in Clients.")
                print("\t2. Update Rating in Doctors.")
                print("\t3. Update Duration of Coverage in Cost of Coverage.")
                print("\t4. Exit to previous directory.")
                try:
                    yel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please make a proper selection.")
                if yel==1:
                    cursorObject.execute("Update Clients Set Risk_Percentage='60'")
                    db.commit()
                elif yel==2:
                    cursorObject.execute("Update Doctors Set Rating='4'")
                    db.commit()
                elif yel==3:
                    cursorObject.execute("Update Cost_of_Coverage Set Duraiton_of_Coverage='18'")
                    db.commit()
                elif yel==4:
                    break
        elif uel==3:
            while True:
                print("Welcome to the row updating portion.")
                print("\t1. Update a row in Clients.")
                print("\t2. Update a row in Doctors")
                print("\t3. Update a row in Cost of Coverage.")
                print("\t4. To return to the previous directory.")
                try:
                    nel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Please stop resisting.")
                if nel==1:
                    cursorObject.execute("Update Clients Set Risk_Percentage='35' Where Account_Number=2")
                    db.commit()
                elif nel==2:
                    cursorObject.execute("Update Doctors Set Rating='2' Where Client_Account= 40")
                    db.commit()
                elif nel==3:
                    cursorObject.execute("Update Cost_of_Coverage Set Duration_of_Coverage='16' Where Account_Number=3")
                    db.commit()
                elif nel==4:
                    break
        elif uel==4:
            break

def insert_deletion():
    while True:
        print("And here is where we bid farewell to our soon to be fallen friends.")
        print("\t1. To delete a row.")
        print("\t2. To delete a column.")
        print("\t3. To truncate a table.")
        print("\t4. To delete a table.")
        print("\t5. Too morbid? Exit here.")
        try:
            rel=int(input("\nSelection: "))
        except ValueError:
            print(ValueError)
            print("R.I.P. yer brain.")
        if rel==1:
            while True:
                print("So, you've selected to lay to rest a row huh?")
                print("\t1. To remove a row from Clients.")
                print("\t2. To remove a row from Doctors.")
                print("\t3. To remove a row from Cost of Coverage.")
                print("\t4. To stop deleting rows.")
                try:
                    pel=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Lay rest to their weary souls.")
                if pel==1:
                    cursorObject.execute("Delete from Clients Where Account_Number=2")
                    db.commit()
                elif pel==2:
                    cursorObject.execute("Delete from Doctors Where Client_Account=33")
                    db.commit()
                elif pel==3:
                    cursorObject.execute("Delete from Cost_of_Coverage Where Account_Number=2")
                    db.commit()
                elif pel==4:
                    break
        elif rel==2:
            while True:
                print("So, you've chosen mass murder...")
                print("\t1. To drop a column from Clients.")
                print("\t2. To drop a column from Doctors.")
                print("\t3. To drop a column from Cost of Coverage.")
                print("\t4. To stop the violence.")
                try:
                    ael=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("Trying to develop a moral conscience?")
                if ael==1:
                    cursorObject.execute("Alter Table Clients Drop Column Risk_Percentage")
                    db.commit()
                elif ael==2:
                    cursorObject.execute("Alter Table Doctors Drop Column Rating")
                    db.commit()
                elif ael==3:
                    cursorObject.execute("Alter Table Cost_of_Coverage Drop Column Duration_of_Coverage")
                    db.commit()
                elif ael==4:
                    break
        elif rel==3:
            while True:
                print("So, now you've chosen cleansing?")
                print("\t1. To truncate Cost of Coverage.")
                print("\t2. To truncate Doctors.")
                print("\t3. To truncate Clients.")
                print("\t4. To distance yourself from this.")
                try:
                    trl=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("It's too late now, you must commit.")
                if trl==1:
                    cursorObject.execute("Truncate Table Cost_of_Coverage")
                    db.commit()
                elif trl==2:
                    cursorObject.execute("Truncate Table Doctors")
                    db.commit()
                elif trl==3:
                    cursorObject.execute("Truncate Table Clients")
                    db.commit()
                elif trl==4:
                    break
        elif rel==4:
                print("Erase them from history.")
                print("\t1. To delete Cost of Coverage.")
                print("\t2. To delete Doctors.")
                print("\t3. To delete Clients.")
                print("\t4. Job... Done.")
                try:
                    erl=int(input("\nSelection: "))
                except ValueError:
                    print(ValueError)
                    print("You could have walked away but the choice is no longer yours.")
                if erl==1:
                    cursorObject.execute("Drop Table Cost_of_Coverage")
                    db.commit()
                elif erl==2:
                    cursorObject.execute("Drop Table Doctors")
                    db.commit()
                elif erl==3:
                    cursorObject.execute("Drop Table Clients")
                    db.commit()
                elif erl==4:
                    break
        elif rel==5:
            break

def startup():
    while True:
        print("Hello, and welcome to this insurance tutorial. Today we will be focusing on some basic functions to help you become an effective member of our team. Please select an option for us to get started.")
        print("\t1. Create information for a table.")
        print("\t2. Read a specific table or column.")
        print("\t3. Update the information of a table.")
        print("\t4. Delete a row, column, or table or even Truncate a Table.")
        print("\t5. Or, exit now and try again later.")
        while True:
            try:
                sel= int(input("\nSelection: "))
            except ValueError:
                print("Value Error")
                print("Please enter an integer that is between 1 and 5.")
            else:
                break
        if sel == 1:
            insert_creation()
        elif sel == 2:
            insert_reading()
        elif sel == 3:
            insert_updating()
        elif sel == 4:
            insert_deletion()
        elif sel == 5:
            disfile = open('newFile.txt', 'w')
            disfile.write(' ')
            disfile.close()
            print("Alright, catch ya later then.")
            break
        else:
            print("Please enter a valid input.")

startup()
        
