MongoDB Notes

We talked about MySQL as Relational (RDBMS)
Mongo is a NoSQL
    non SQL
    Not only SQL
    Not Relational
    Mongo allows us to organize unstructured data as well as structured.

NoSQL allows us to organize wide varieties of data.
    Distributed - server don't have a single point of failure, data is kept in multiple locations
    Scalable, data storage can expand based on what is needed
        - Horizontally scalable, which means that increasing capacity just means using more servers
    - High performance querying
    - Large throughput
    - Allows for data clustering across multiple machines
    - Does not have ACID properties
        makes transactions more loose

Mongo - a document based NoSQL
    has collections that are stored as documents and documents are records
    Terminology:
        NoSQL       Mongo
        Database    Database
        Table       Collection
        Row/Record  Document
        Column      Field
        Join        Embedding Documents
        Primary Key Primary Key
            A document consists of key-value pairs
    Datatypes:
        String
        Int
        Float
        Double
        Long
        Boolean
        ObjectID
        Null
        Binary Data
        Symbol
        JavaScript
        Regular Expression

Example:
    {first_name: "John",
    last_name: "Johnson",
    cell: "1234567890",
    city: "Los Angeles",
    profession : ["banking", "finance", "trader"]}
    cars:[{{model: "Charger" year: 2007}{model:"Mustang", year: 1970}] date: "01-01-2022"}

    Generally called JSON Format, fields and values seperated by colons.
    Sharding:
        storing data across multiple machines to meet the demands of big data
        Increases the memory and processing capability of the server through horizontal scaling
        Mongo's approach to increasing data throughput and efficiency

CRUD Operations:
C - Create
    > show dbs
    > use db_name (can also create a new database if the name doesn't exist yet)
    > db.createCikkectuib("CollectionName")
    > show collections
    >db.CollectionName.InsertOne({})
    >db.CollectionName.InsertMany({}, {}, {},....)
    The {} identify the info that goes into a document
    when inserting multiple documents, be sure to use [] because it is a list of doccuments
R - Read
    > db.CollectionName.find() - gives you object IDs with info
    > db.CollectionName.find().pretty() - prints out the info more clearly
    find() is Mongo's version of Select
    In the find() you indicate what your search criteria is
    - query for multiple specific fields/values
        db.CollectionName.find({first_name: "Taylor", last_name: "Willis"})
    - query with $or to search for documents that satisfy either condition
        db.CollectionName.find({$or: [{first_name: "Bob"}, {last_name: "Swizzle"}]}).pretty()
    - query for fields with values greater/less than a value
        db.CollectionName.find({age: {$lt: 30}})
U - Update
    updateOne(), updateMany()
    > db.collectionname.updateOne({{first_name:"Name"}, {$set last_name:"name2"}})
    - you can use update to insert new fields into documents that weren't there before
    updateOne() - will only change the first document it finds
    updateMany() - will change all documents that fit the criteria
D - Delete
    deleteOne(), deleteMany()
    > db.collectionname.deleteOne({first_name:"name"})
    to delete everything from the collection
    > db.collectionname.deleteMany({}, {})

Embedding Documents:
    functions in a similar way to MySQL Joins
    Taking information from one document and placing it directly into another
    Increases efficiency
    Use it when data that relates to each other frequently needs to be used together
    Embed a document just like you would create a list []

Primary Keys:
    Mongo is not relational, Primary Keys are not necessary to create relations.
    Instead, Mongo just has the Embedded Documents
    Ensures documents are uniquely identified
    Makes querying much easier
    Primary Keys in Mongo are done using "_id " field
    Mongo will automatically create these if you do not declare them explicitly
    _id is 12 bytes of data
        4 - bytes timestamp data, to note the time of creation
        5 - bytes are a random value
        3 - bytes are a counter that ticks based on the random value
    These random numbers mean that the _id field is "most likely" unique
        If you don't want Mongo to create _id automatically then you must define it explicitly
        _id is an immutable field, it cannot be changed using updateOne() or updateMany()

pyMongo:
    Connecting your MongoDB server to a Python application